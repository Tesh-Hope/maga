{"version":3,"sources":["components/Navigation.js","components/footer.js","containers/App.js","serviceWorker.js","index.js"],"names":["Navigation","props","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","role","aria-haspopup","aria-labelledby","class","placeholder","Footer","Placeholder","style","margin","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qOA8CeA,EA5CI,SAACC,GAElB,OACE,6BACJ,yBAAKC,UAAU,iDACb,uBAAGA,UAAU,6CAA6CC,KAAK,KAA/D,WACA,4BAAQD,UAAU,iBAAiBE,KAAK,SAASC,cAAY,WAAWC,cAAY,0BAA0BC,gBAAc,yBAAyBC,gBAAc,QAAQC,aAAW,qBACpL,0BAAMP,UAAU,yBAGlB,yBAAKA,UAAU,2BAA2BQ,GAAG,0BAC3C,wBAAIR,UAAU,sBACZ,wBAAIA,UAAU,mBACZ,uBAAGA,UAAU,WAAWC,KAAK,KAA7B,QAAsC,0BAAMD,UAAU,WAAhB,eAExC,wBAAIA,UAAU,YACZ,uBAAGA,UAAU,WAAWC,KAAK,KAA7B,iBAEF,wBAAID,UAAU,qBACZ,uBAAGA,UAAU,2BAA2BC,KAAK,IAAIO,GAAG,iBAAiBC,KAAK,SAASN,cAAY,WAAWO,gBAAc,OAAOJ,gBAAc,SAA7I,wBAGA,yBAAKN,UAAU,gBAAgBW,kBAAgB,kBAC7C,uBAAGX,UAAU,gBAAgBC,KAAK,KAAlC,YACA,uBAAGD,UAAU,gBAAgBC,KAAK,KAAlC,eACA,yBAAKD,UAAU,qBACf,uBAAGA,UAAU,gBAAgBC,KAAK,QAGtC,wBAAID,UAAU,YACZ,uBAAGA,UAAU,oBAAoBC,KAAK,KAAtC,iBAGJ,0BAAMD,UAAU,4BACd,2BAAOY,MAAM,uBAAuBV,KAAK,SAASW,YAAY,SAASN,aAAW,WAClF,4BAAQP,UAAU,uCAAuCE,KAAK,UAA9D,eCRSY,EA3BA,WACd,OACC,6BACC,wBAAId,UAAU,8BACZ,IADF,kCAEiC,KAEjC,wBAAIA,UAAU,sBACZ,IADF,8DAE8D,KAG9D,yBAAKA,UAAU,mBACf,2BAAOA,UAAU,qBAAsBE,KAAK,QAAQa,YAAY,mBAEhE,4BAAQf,UAAW,0BAA0BE,KAAK,SAASc,MAAO,CAACC,OAAQ,SAA3E,UAEA,yBAAKjB,UAAU,+BACd,yBAAKA,UAAU,OACf,uBAAGA,UAAU,WACb,uBAAGA,UAAU,qBAAoB,oDAAjC,4BAA0F,6BAAK,iDCJpFkB,G,6KAVX,OACD,6BACC,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALcC,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.08978539.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Navigation = (props) => {\r\n  \r\n  return (\r\n    <div>\r\n<nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n  <a className=\"navbar-brand text-warning font-weight-bold\" href=\"#\">Slayboy</a>\r\n  <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n    <span className=\"navbar-toggler-icon\"></span>\r\n  </button>\r\n\r\n  <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n    <ul className=\"navbar-nav mr-auto\">\r\n      <li className=\"nav-item active\">\r\n        <a className=\"nav-link\" href=\"#\">Home <span className=\"sr-only\">(current)</span></a>\r\n      </li>\r\n      <li className=\"nav-item\">\r\n        <a className=\"nav-link\" href=\"#\">StuffedPussy</a>\r\n      </li>\r\n      <li className=\"nav-item dropdown\">\r\n        <a className=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n          Diet for Vagitarians\r\n        </a>\r\n        <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n          <a className=\"dropdown-item\" href=\"#\">fishlips</a>\r\n          <a className=\"dropdown-item\" href=\"#\">hungryHippo</a>\r\n          <div className=\"dropdown-divider\"></div>\r\n          <a className=\"dropdown-item\" href=\"#\"></a>\r\n        </div>\r\n      </li>\r\n      <li className=\"nav-item\">\r\n        <a className=\"nav-link disabled\" href=\"#\">PocketPussy</a>\r\n      </li>\r\n    </ul>\r\n    <form className=\"form-inline my-2 my-lg-0\">\r\n      <input class=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n      <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\r\n    </form>\r\n  </div>\r\n</nav>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navigation;","import React from \"react\";\r\n\r\nconst Footer = () => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h4 className=\"text-secondary text-center\">\r\n\t\t\t\t{\" \"}\r\n\t\t\t\tWelcome Aboard HELMETWARRIORS!!{\" \"}\r\n\t\t\t</h4>\r\n\t\t\t<h1 className=\"text-4 text-danger\">\r\n\t\t\t\t{\" \"}\r\n\t\t\t\t Reveal that 'Slayboy' in you, subscribe to our newsletter!!{\" \"}\r\n\t\t\t</h1>\r\n\r\n\t\t\t<div className=\"container-fluid\">\r\n\t\t\t<input className=\"text-center col-12\"  type=\"email\" Placeholder=\"your email id\"/>\r\n</div>\r\n\t\t\t<button className= \"text-center btn-primary\" type=\"submit\" style={{margin: \"20px\"}}>submit</button>\r\n\r\n\t\t\t<div className=\"container-fluid text-center\">\r\n\t\t\t\t<div className=\"row\">\r\n\t\t\t\t<p className=\"col-9 \"></p>\r\n\t\t\t\t<p className=\"col-3 bg-warning \"><style>text-align: right</style>pocket pussies for sale!!<hr/><button>click me</button></p>\r\n\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Footer;\r\n","import React, { Component } from 'react';\nimport Navigation from '../components/Navigation';\nimport Footer from '../components/footer.js'\nimport './App.css';\n\n\nclass App extends Component {\n  render() {\n    return (\n   <div>\n    <Navigation />\n    <Footer />\n\n    </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}